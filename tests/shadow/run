#!/usr/bin/python3
#
# Test script for shadow utils
#
# Copyright (C) 2021 Olaf Kirch <okir@suse.de>

import susetest

@susetest.test
def verify_chfn(driver):
	'''shadow.chfn: check if test user can change GECOS information'''
	node = driver.client
	user = node.getResource("test-user")
	if not user.uid:
		node.logFailure("user %s does not seem to exist" % user.login)
		return

	if not user.password:
		node.logFailure("user %s: password not known" % user.login)
		return

	chat_script = [
		["assword: ", user.password],
	]

	st = node.runChatScript("chfn --room 123", chat_script, timeout = 10, user = user.login)
	if st is None:
		return

	if not st:
		node.logFailure("chfn command exited with error")
		return

	st = node.run("grep '^%s:' /etc/passwd" % user.login, stdout = bytearray())
	if not st:
		node.logFailure("Could not find user %s in /etc/passwd" % user.login)
		return

	gecos = st.stdoutString.split(':')
	if len(gecos) < 5:
		node.logFailure("Could not parse /etc/passwd entry for user %s" % user.login)
		return

	gecos_fields = gecos[4].split(',')
	if len(gecos_fields) < 2:
		node.logFailure("Bad number of GECOS fields for user %s" % user.login)
		return

	if gecos_fields[1] != '123':
		node.logFailure("Apparently, we failed to change the user info for %s." % user.login)
		return

	node.logInfo("OK, GECOS field was changed to include the phone number 123")

@susetest.test
def verify_passwd(driver):
	'''shadow.passwd: check if test user can change password'''
	new_password = "$up3r/3l1t3/PAssw0rd"

	node = driver.client
	user = node.getResource("test-user")
	if not user.uid:
		node.logFailure("user %s does not seem to exist" % user.login)
		return

	if not user.password:
		node.logFailure("user %s: password not known" % user.login)
		return

	node.logInfo("backing up shadow file")
	node.run("ln /etc/shadow /etc/shadow.twopence")

	chat_script = [
		["urrent password: ", user.password],
		["ew password: ", new_password],
		["password: ", new_password],
	]

	st = node.runChatScript("passwd", chat_script, timeout = 10, user = user.login)
	if st is None:
		node.logError("unable to run passwd command")
	elif not st:
		node.logFailure("passwd command exited with error")
	else:
		pass
	
	node.run("mv /etc/shadow.twopence /etc/shadow")
	node.logInfo("restored shadow file")

# boilerplate tests
susetest.template('selinux-verify-resource', 'passwd')
susetest.template('selinux-verify-resource', 'chsh')
susetest.template('selinux-verify-resource', 'chfn')


if __name__ == '__main__':
	susetest.perform()
