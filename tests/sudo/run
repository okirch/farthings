#!/usr/bin/python3
#
# Test script for shadow utils
#
# Copyright (C) 2021 Olaf Kirch <okir@suse.de>

import susetest

class SudoState:
	_instance = None

	@classmethod
	def instance(klass, driver):
		if klass._instance is None or klass._instance.driver is not driver:
			instance = klass(driver)
			if not instance.initialize():
				return None
			klass._instance = instance
		return klass._instance

	def __init__(self, driver):
		self.driver = driver

	def initialize(self):
		node = self.driver.client
		self.node = node

		self.logInfo = node.logInfo

		root = node.requireUser("root-user")
		if not root:
			node.logError("Cannot find resource root-user")
			return
		# Set the root password, brute force (sed -i 'blah' /etc/shadow)
		if not root.forcePassword():
			return
		self.root = root

		user = node.requireUser("test-user")
		if not user.uid:
			node.logFailure("user %s does not seem to exist" % user.login)
			return
		self.user = user

		return True

	@property
	def root_password(self):
		return self.root.password

	@property
	def test_user(self):
		return self.user.login

	def sudoResetTimestamp(self):
		node = self.node

		node.logInfo("remove cached credentials for %s" % self.test_user)
		st = node.run("sudo -k", user = self.test_user)
		if not st:
			node.logFailure("sudo -k failed: %s" % st.message)
			return False

		return True

	def runSudoWithPassword(self, cmd):
		chat_script = [
			["password for root:", self.root_password],
		]

		node = self.node
		st = node.runChatScript("sudo %s" % cmd, chat_script, timeout = 10, user = self.test_user, tty = True)
		if not st:
			node.logFailure("sudo with root passwd failed: %s" % st.message)
			return False

		return True

	def runSudoWithoutPassword(self, cmd):
		input = bytearray("bad\n".encode('utf-8'))
		st = self.node.run("sudo %s" % cmd, timeout = 10, user = self.test_user, stdin = input, tty = True)
		if not st:
			self.node.logFailure("sudo with cached credentials failed: %s" % st.message)
			return False

		return True

@susetest.test
def verify_rootpass(driver):
	'''sudo.rootpass: verify sudo with root password'''
	state = SudoState.instance(driver)
	node = state.node

	state.sudoResetTimestamp()

	state.logInfo("sudo should ask for root password on first attempt")
	if not state.runSudoWithPassword("true"):
		return

	state.logInfo("OKAY, this seems to work as expected")

@susetest.test
def verify_cachedcreds(driver):
	'''sudo.cachedcreds: verify that sudo caches credentials'''
	state = SudoState.instance(driver)

	state.logInfo("sudo should accept user without password on second attempt")
	if not state.runSudoWithPassword("true && sleep 1 && sudo true"):
		return

	state.logInfo("OKAY, this seems to work as expected")

@susetest.test
def verify_clearcreds(driver):
	'''sudo.clearcreds: verify that we can clear cached sudo credentials'''
	state = SudoState.instance(driver)

	state.sudoResetTimestamp()

	state.logInfo("after clearing credentials, sudo should ask for password again")
	if not state.runSudoWithPassword("true"):
		return

	if not state.sudoResetTimestamp():
		return

	state.logInfo("OKAY, this seems to work as expected")

@susetest.test
def verify_sudoer(driver):
	'''sudo.sudoer: verify sudo with sudoer entry'''
	state = SudoState.instance(driver)
	node = state.node

	username = state.test_user
	sudoerPath = "/etc/sudoers.d/" + username

	node.sendbuffer(sudoerPath,
			"%s ALL=(ALL) NOPASSWD: ALL" % username,
			user = "root")

	node.run("cat " + sudoerPath, user = "root")

	node.logInfo("sudo should not ask for password")
	st = node.run("sudo true", timeout = 10, user = username)
	if not st:
		node.logFailure("sudo with sudoer failed")
	else:
		node.logInfo("OKAY, this seems to work as expected")

	node.run("rm -f " + sudoerPath, user = "root")

# boilerplate tests
susetest.template('selinux-verify-executable', 'sudo')


if __name__ == '__main__':
	susetest.perform()
